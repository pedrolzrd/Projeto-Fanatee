//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Input Maps/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Player 1 Actions"",
            ""id"": ""16c8ed87-3212-4f55-a374-2c74ca5b3bc2"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""e228ccf0-19b0-4b59-ac6c-95cf44f4d98c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""422f61bc-14b3-4b72-9331-2a37c7c56af2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DropNumber"",
                    ""type"": ""Button"",
                    ""id"": ""6cbb8fd3-e5f7-4d68-9de8-d2fa79c00993"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SomaStart"",
                    ""type"": ""Button"",
                    ""id"": ""381ed3dc-dbe3-4113-9087-651fda6635ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SomaFinished"",
                    ""type"": ""Button"",
                    ""id"": ""268916b6-c781-4354-82e7-1f9373f18b7d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""a51b5fa5-7769-4454-887f-28071d19d187"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""cb059a02-afd7-49b2-937d-b7385b8cb3ab"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2c56691f-3f11-4682-9aff-174d519beeb2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7695c247-ce92-4cc8-9edd-1300fc662ecc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7fca32da-cfc0-4cc1-8745-aec5b223b187"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Number Pad"",
                    ""id"": ""2a76e7a6-20d4-46b4-857c-8df841ef9ad9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""920a45b7-dc69-442f-b7e5-fe3ccd3d1320"",
                    ""path"": ""<Keyboard>/numpad8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""cae0b37f-2ad8-43c1-a7b4-22d4ebecbef9"",
                    ""path"": ""<Keyboard>/numpad5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""75928a5c-2ec2-4fc6-81ff-2d81b3eb8279"",
                    ""path"": ""<Keyboard>/numpad4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0bdba841-e39e-486a-8438-146c247a6354"",
                    ""path"": ""<Keyboard>/numpad6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0cc9d0fa-455e-40fe-83b1-f2f6c98dca63"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a8cfaf2-b3b5-4552-bd7f-32fc4bc4a3f4"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DropNumber"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a06f168e-caa5-4ab3-8785-58dba1562f14"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SomaStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e74d2a9-6382-4bc3-8703-30bf80cc0677"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SomaFinished"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player 2 Actions"",
            ""id"": ""e4a74111-0060-48e8-a05e-f9095d0caee0"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""87abfa92-f957-45ab-bc6c-bab7c1576526"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""d4ac65ca-dcad-4534-9e14-f71f8e21ea05"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DropNumber"",
                    ""type"": ""Button"",
                    ""id"": ""6b492a6a-9479-4d2a-8524-5511976e5fc1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""GamePad"",
                    ""id"": ""cf6d220d-4a32-4f63-91fa-64f4e8bf4896"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""332f3567-5f51-4afa-b420-19f13ecd6b69"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d086f387-8e91-4e5e-bf3a-41da062375cf"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""11c169a2-b42b-47f6-9b90-68daee5c897c"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f235e98b-4562-4336-b345-ab7238e74657"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard Arrows"",
                    ""id"": ""42fc3200-2286-448c-a0ef-1c4798fdfa6c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6a098887-4e8e-428c-a6e0-615532ed8c3b"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b449edf1-7f30-49f6-a5b4-e1f35e524ce1"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""dbfc26bd-0487-411a-bdfa-defe8b0f2492"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2d8ec3a2-84cb-4462-aa26-ce7c29dff096"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""70a3fef5-f07d-451b-b764-da029614f8dc"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5898b247-ea70-48d0-b4a1-b16968b20cf5"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""229f6050-b5c4-416a-a45d-9946b273378a"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DropNumber"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""897758ec-24c7-4c34-8208-4ecac4833e18"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DropNumber"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player 1 Actions
        m_Player1Actions = asset.FindActionMap("Player 1 Actions", throwIfNotFound: true);
        m_Player1Actions_Move = m_Player1Actions.FindAction("Move", throwIfNotFound: true);
        m_Player1Actions_Jump = m_Player1Actions.FindAction("Jump", throwIfNotFound: true);
        m_Player1Actions_DropNumber = m_Player1Actions.FindAction("DropNumber", throwIfNotFound: true);
        m_Player1Actions_SomaStart = m_Player1Actions.FindAction("SomaStart", throwIfNotFound: true);
        m_Player1Actions_SomaFinished = m_Player1Actions.FindAction("SomaFinished", throwIfNotFound: true);
        // Player 2 Actions
        m_Player2Actions = asset.FindActionMap("Player 2 Actions", throwIfNotFound: true);
        m_Player2Actions_Move = m_Player2Actions.FindAction("Move", throwIfNotFound: true);
        m_Player2Actions_Jump = m_Player2Actions.FindAction("Jump", throwIfNotFound: true);
        m_Player2Actions_DropNumber = m_Player2Actions.FindAction("DropNumber", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player 1 Actions
    private readonly InputActionMap m_Player1Actions;
    private List<IPlayer1ActionsActions> m_Player1ActionsActionsCallbackInterfaces = new List<IPlayer1ActionsActions>();
    private readonly InputAction m_Player1Actions_Move;
    private readonly InputAction m_Player1Actions_Jump;
    private readonly InputAction m_Player1Actions_DropNumber;
    private readonly InputAction m_Player1Actions_SomaStart;
    private readonly InputAction m_Player1Actions_SomaFinished;
    public struct Player1ActionsActions
    {
        private @Controls m_Wrapper;
        public Player1ActionsActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player1Actions_Move;
        public InputAction @Jump => m_Wrapper.m_Player1Actions_Jump;
        public InputAction @DropNumber => m_Wrapper.m_Player1Actions_DropNumber;
        public InputAction @SomaStart => m_Wrapper.m_Player1Actions_SomaStart;
        public InputAction @SomaFinished => m_Wrapper.m_Player1Actions_SomaFinished;
        public InputActionMap Get() { return m_Wrapper.m_Player1Actions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player1ActionsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayer1ActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_Player1ActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player1ActionsActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @DropNumber.started += instance.OnDropNumber;
            @DropNumber.performed += instance.OnDropNumber;
            @DropNumber.canceled += instance.OnDropNumber;
            @SomaStart.started += instance.OnSomaStart;
            @SomaStart.performed += instance.OnSomaStart;
            @SomaStart.canceled += instance.OnSomaStart;
            @SomaFinished.started += instance.OnSomaFinished;
            @SomaFinished.performed += instance.OnSomaFinished;
            @SomaFinished.canceled += instance.OnSomaFinished;
        }

        private void UnregisterCallbacks(IPlayer1ActionsActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @DropNumber.started -= instance.OnDropNumber;
            @DropNumber.performed -= instance.OnDropNumber;
            @DropNumber.canceled -= instance.OnDropNumber;
            @SomaStart.started -= instance.OnSomaStart;
            @SomaStart.performed -= instance.OnSomaStart;
            @SomaStart.canceled -= instance.OnSomaStart;
            @SomaFinished.started -= instance.OnSomaFinished;
            @SomaFinished.performed -= instance.OnSomaFinished;
            @SomaFinished.canceled -= instance.OnSomaFinished;
        }

        public void RemoveCallbacks(IPlayer1ActionsActions instance)
        {
            if (m_Wrapper.m_Player1ActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer1ActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_Player1ActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player1ActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player1ActionsActions @Player1Actions => new Player1ActionsActions(this);

    // Player 2 Actions
    private readonly InputActionMap m_Player2Actions;
    private List<IPlayer2ActionsActions> m_Player2ActionsActionsCallbackInterfaces = new List<IPlayer2ActionsActions>();
    private readonly InputAction m_Player2Actions_Move;
    private readonly InputAction m_Player2Actions_Jump;
    private readonly InputAction m_Player2Actions_DropNumber;
    public struct Player2ActionsActions
    {
        private @Controls m_Wrapper;
        public Player2ActionsActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player2Actions_Move;
        public InputAction @Jump => m_Wrapper.m_Player2Actions_Jump;
        public InputAction @DropNumber => m_Wrapper.m_Player2Actions_DropNumber;
        public InputActionMap Get() { return m_Wrapper.m_Player2Actions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player2ActionsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayer2ActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_Player2ActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player2ActionsActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @DropNumber.started += instance.OnDropNumber;
            @DropNumber.performed += instance.OnDropNumber;
            @DropNumber.canceled += instance.OnDropNumber;
        }

        private void UnregisterCallbacks(IPlayer2ActionsActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @DropNumber.started -= instance.OnDropNumber;
            @DropNumber.performed -= instance.OnDropNumber;
            @DropNumber.canceled -= instance.OnDropNumber;
        }

        public void RemoveCallbacks(IPlayer2ActionsActions instance)
        {
            if (m_Wrapper.m_Player2ActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer2ActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_Player2ActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player2ActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player2ActionsActions @Player2Actions => new Player2ActionsActions(this);
    public interface IPlayer1ActionsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnDropNumber(InputAction.CallbackContext context);
        void OnSomaStart(InputAction.CallbackContext context);
        void OnSomaFinished(InputAction.CallbackContext context);
    }
    public interface IPlayer2ActionsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnDropNumber(InputAction.CallbackContext context);
    }
}
