//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Input Maps/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Player 1 Actions"",
            ""id"": ""16c8ed87-3212-4f55-a374-2c74ca5b3bc2"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""e228ccf0-19b0-4b59-ac6c-95cf44f4d98c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""422f61bc-14b3-4b72-9331-2a37c7c56af2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DropNumber"",
                    ""type"": ""Button"",
                    ""id"": ""6cbb8fd3-e5f7-4d68-9de8-d2fa79c00993"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SomaStart"",
                    ""type"": ""Button"",
                    ""id"": ""381ed3dc-dbe3-4113-9087-651fda6635ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SomaFinished"",
                    ""type"": ""Button"",
                    ""id"": ""268916b6-c781-4354-82e7-1f9373f18b7d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""a51b5fa5-7769-4454-887f-28071d19d187"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""cb059a02-afd7-49b2-937d-b7385b8cb3ab"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2c56691f-3f11-4682-9aff-174d519beeb2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7695c247-ce92-4cc8-9edd-1300fc662ecc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7fca32da-cfc0-4cc1-8745-aec5b223b187"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Number Pad"",
                    ""id"": ""2a76e7a6-20d4-46b4-857c-8df841ef9ad9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""920a45b7-dc69-442f-b7e5-fe3ccd3d1320"",
                    ""path"": ""<Keyboard>/numpad8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""cae0b37f-2ad8-43c1-a7b4-22d4ebecbef9"",
                    ""path"": ""<Keyboard>/numpad5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""75928a5c-2ec2-4fc6-81ff-2d81b3eb8279"",
                    ""path"": ""<Keyboard>/numpad4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0bdba841-e39e-486a-8438-146c247a6354"",
                    ""path"": ""<Keyboard>/numpad6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""2fe8c3ab-e6cc-40c4-8179-e6b7d3ffc764"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""054f5d93-939c-4311-9b61-44fd882f60c6"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6c13a72f-dc61-48a3-a808-ce09ffc9d204"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""27c92570-9378-4d37-bbe2-d41668cddb48"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""aad9081f-e9ae-44a2-b5c5-5d4921562586"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0cc9d0fa-455e-40fe-83b1-f2f6c98dca63"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""89801aac-e147-4694-b602-1f500641ec0e"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a8cfaf2-b3b5-4552-bd7f-32fc4bc4a3f4"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DropNumber"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9bd4194a-c736-46fd-a9b8-6f2642868e71"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DropNumber"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a06f168e-caa5-4ab3-8785-58dba1562f14"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SomaStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e74d2a9-6382-4bc3-8703-30bf80cc0677"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SomaFinished"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player 2 Actions"",
            ""id"": ""d5462367-f541-4b77-b3ff-62f772c67d74"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""22f3bba4-84eb-423e-8ca6-404ccb060fec"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""2d4da650-6ee7-4759-8cc2-01d572c6e3b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DropNumber"",
                    ""type"": ""Button"",
                    ""id"": ""b84e3061-b8b8-410b-8df7-ec14a74bac19"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SomaStart"",
                    ""type"": ""Button"",
                    ""id"": ""d27c1095-ae79-4924-8a87-4a9c4b1d4237"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SomaFinished"",
                    ""type"": ""Button"",
                    ""id"": ""22a13abe-333d-42a6-a774-99e7af06bce5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3646a843-6771-44d6-a38c-c08e35178fc2"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6fd74d08-0ca7-4820-abb6-46ec977edcab"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1820ebe7-9291-4838-aa5f-1ded34f3b786"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DropNumber"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3710a833-9bae-4c7f-a6fd-1a100ef4aad2"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""DropNumber"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""139be527-e1af-40d8-b47e-54f15b43fe29"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SomaStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ae0de3ef-b3af-4f89-ba91-6c04cb6e316e"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SomaFinished"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""0418872f-001b-49f5-a4af-81c8a469c620"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6a4a3f6b-028b-4f4a-ac5d-54d3ebf1ff8b"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ee9255cc-d3d1-4066-853c-afd834df2998"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2c74ce84-a459-47ba-8256-20546b25fbc6"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""289ab6bd-6365-4b92-b349-feeb425dee6a"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""DisableControlMap"",
            ""id"": ""f4b6cd59-8cc7-49b8-a68f-54728f01df10"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""825318dc-3b00-4402-83d9-a08116076981"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8e6c9857-0343-437e-a7b5-16e605d0cee0"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        }
    ]
}");
        // Player 1 Actions
        m_Player1Actions = asset.FindActionMap("Player 1 Actions", throwIfNotFound: true);
        m_Player1Actions_Move = m_Player1Actions.FindAction("Move", throwIfNotFound: true);
        m_Player1Actions_Jump = m_Player1Actions.FindAction("Jump", throwIfNotFound: true);
        m_Player1Actions_DropNumber = m_Player1Actions.FindAction("DropNumber", throwIfNotFound: true);
        m_Player1Actions_SomaStart = m_Player1Actions.FindAction("SomaStart", throwIfNotFound: true);
        m_Player1Actions_SomaFinished = m_Player1Actions.FindAction("SomaFinished", throwIfNotFound: true);
        // Player 2 Actions
        m_Player2Actions = asset.FindActionMap("Player 2 Actions", throwIfNotFound: true);
        m_Player2Actions_Move = m_Player2Actions.FindAction("Move", throwIfNotFound: true);
        m_Player2Actions_Jump = m_Player2Actions.FindAction("Jump", throwIfNotFound: true);
        m_Player2Actions_DropNumber = m_Player2Actions.FindAction("DropNumber", throwIfNotFound: true);
        m_Player2Actions_SomaStart = m_Player2Actions.FindAction("SomaStart", throwIfNotFound: true);
        m_Player2Actions_SomaFinished = m_Player2Actions.FindAction("SomaFinished", throwIfNotFound: true);
        // DisableControlMap
        m_DisableControlMap = asset.FindActionMap("DisableControlMap", throwIfNotFound: true);
        m_DisableControlMap_Newaction = m_DisableControlMap.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player 1 Actions
    private readonly InputActionMap m_Player1Actions;
    private List<IPlayer1ActionsActions> m_Player1ActionsActionsCallbackInterfaces = new List<IPlayer1ActionsActions>();
    private readonly InputAction m_Player1Actions_Move;
    private readonly InputAction m_Player1Actions_Jump;
    private readonly InputAction m_Player1Actions_DropNumber;
    private readonly InputAction m_Player1Actions_SomaStart;
    private readonly InputAction m_Player1Actions_SomaFinished;
    public struct Player1ActionsActions
    {
        private @Controls m_Wrapper;
        public Player1ActionsActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player1Actions_Move;
        public InputAction @Jump => m_Wrapper.m_Player1Actions_Jump;
        public InputAction @DropNumber => m_Wrapper.m_Player1Actions_DropNumber;
        public InputAction @SomaStart => m_Wrapper.m_Player1Actions_SomaStart;
        public InputAction @SomaFinished => m_Wrapper.m_Player1Actions_SomaFinished;
        public InputActionMap Get() { return m_Wrapper.m_Player1Actions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player1ActionsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayer1ActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_Player1ActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player1ActionsActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @DropNumber.started += instance.OnDropNumber;
            @DropNumber.performed += instance.OnDropNumber;
            @DropNumber.canceled += instance.OnDropNumber;
            @SomaStart.started += instance.OnSomaStart;
            @SomaStart.performed += instance.OnSomaStart;
            @SomaStart.canceled += instance.OnSomaStart;
            @SomaFinished.started += instance.OnSomaFinished;
            @SomaFinished.performed += instance.OnSomaFinished;
            @SomaFinished.canceled += instance.OnSomaFinished;
        }

        private void UnregisterCallbacks(IPlayer1ActionsActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @DropNumber.started -= instance.OnDropNumber;
            @DropNumber.performed -= instance.OnDropNumber;
            @DropNumber.canceled -= instance.OnDropNumber;
            @SomaStart.started -= instance.OnSomaStart;
            @SomaStart.performed -= instance.OnSomaStart;
            @SomaStart.canceled -= instance.OnSomaStart;
            @SomaFinished.started -= instance.OnSomaFinished;
            @SomaFinished.performed -= instance.OnSomaFinished;
            @SomaFinished.canceled -= instance.OnSomaFinished;
        }

        public void RemoveCallbacks(IPlayer1ActionsActions instance)
        {
            if (m_Wrapper.m_Player1ActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer1ActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_Player1ActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player1ActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player1ActionsActions @Player1Actions => new Player1ActionsActions(this);

    // Player 2 Actions
    private readonly InputActionMap m_Player2Actions;
    private List<IPlayer2ActionsActions> m_Player2ActionsActionsCallbackInterfaces = new List<IPlayer2ActionsActions>();
    private readonly InputAction m_Player2Actions_Move;
    private readonly InputAction m_Player2Actions_Jump;
    private readonly InputAction m_Player2Actions_DropNumber;
    private readonly InputAction m_Player2Actions_SomaStart;
    private readonly InputAction m_Player2Actions_SomaFinished;
    public struct Player2ActionsActions
    {
        private @Controls m_Wrapper;
        public Player2ActionsActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player2Actions_Move;
        public InputAction @Jump => m_Wrapper.m_Player2Actions_Jump;
        public InputAction @DropNumber => m_Wrapper.m_Player2Actions_DropNumber;
        public InputAction @SomaStart => m_Wrapper.m_Player2Actions_SomaStart;
        public InputAction @SomaFinished => m_Wrapper.m_Player2Actions_SomaFinished;
        public InputActionMap Get() { return m_Wrapper.m_Player2Actions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player2ActionsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayer2ActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_Player2ActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player2ActionsActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @DropNumber.started += instance.OnDropNumber;
            @DropNumber.performed += instance.OnDropNumber;
            @DropNumber.canceled += instance.OnDropNumber;
            @SomaStart.started += instance.OnSomaStart;
            @SomaStart.performed += instance.OnSomaStart;
            @SomaStart.canceled += instance.OnSomaStart;
            @SomaFinished.started += instance.OnSomaFinished;
            @SomaFinished.performed += instance.OnSomaFinished;
            @SomaFinished.canceled += instance.OnSomaFinished;
        }

        private void UnregisterCallbacks(IPlayer2ActionsActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @DropNumber.started -= instance.OnDropNumber;
            @DropNumber.performed -= instance.OnDropNumber;
            @DropNumber.canceled -= instance.OnDropNumber;
            @SomaStart.started -= instance.OnSomaStart;
            @SomaStart.performed -= instance.OnSomaStart;
            @SomaStart.canceled -= instance.OnSomaStart;
            @SomaFinished.started -= instance.OnSomaFinished;
            @SomaFinished.performed -= instance.OnSomaFinished;
            @SomaFinished.canceled -= instance.OnSomaFinished;
        }

        public void RemoveCallbacks(IPlayer2ActionsActions instance)
        {
            if (m_Wrapper.m_Player2ActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer2ActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_Player2ActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player2ActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player2ActionsActions @Player2Actions => new Player2ActionsActions(this);

    // DisableControlMap
    private readonly InputActionMap m_DisableControlMap;
    private List<IDisableControlMapActions> m_DisableControlMapActionsCallbackInterfaces = new List<IDisableControlMapActions>();
    private readonly InputAction m_DisableControlMap_Newaction;
    public struct DisableControlMapActions
    {
        private @Controls m_Wrapper;
        public DisableControlMapActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_DisableControlMap_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_DisableControlMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DisableControlMapActions set) { return set.Get(); }
        public void AddCallbacks(IDisableControlMapActions instance)
        {
            if (instance == null || m_Wrapper.m_DisableControlMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DisableControlMapActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IDisableControlMapActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IDisableControlMapActions instance)
        {
            if (m_Wrapper.m_DisableControlMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDisableControlMapActions instance)
        {
            foreach (var item in m_Wrapper.m_DisableControlMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DisableControlMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DisableControlMapActions @DisableControlMap => new DisableControlMapActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IPlayer1ActionsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnDropNumber(InputAction.CallbackContext context);
        void OnSomaStart(InputAction.CallbackContext context);
        void OnSomaFinished(InputAction.CallbackContext context);
    }
    public interface IPlayer2ActionsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnDropNumber(InputAction.CallbackContext context);
        void OnSomaStart(InputAction.CallbackContext context);
        void OnSomaFinished(InputAction.CallbackContext context);
    }
    public interface IDisableControlMapActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
